;Ejercicio 1
; Define una función llamada calcular-monto que toma tres argumentos: Cap (capital), I (tasa de interés) y N (número de periodos)
(define (calcular-monto Cap I N)
  
  ; Define una función interna llamada calcular-monto-aux que toma cuatro argumentos: Cap, I, N y resultado
  (define (calcular-monto-aux Cap I N resultado)
    
    ; Utiliza la expresión condicional (if) para verificar si N es igual a 0
    (if (= N 0)
        
        ; Si N es 0, devuelve el resultado actual
        resultado
        
        ; Si N no es 0, ejecuta el bloque else
        (calcular-monto-aux Cap I (- N 1) (* resultado (+ 1 I)))))
  
  ; Llama a la función auxiliar calcular-monto-aux con los argumentos iniciales
  (calcular-monto-aux Cap I N Cap))

; Ejemplos de uso de la función calcular-monto

(displayln (calcular-monto 2000 0.10 0)) 

(displayln (calcular-monto 2000 0.10 1))

(displayln (calcular-monto 2000 0.10 2)) 

(displayln (calcular-monto 2000 0.10 3)) 
;.....................................................................................................................
                                        
;Ejecicicio 6
; Define una función llamada merge que toma dos listas ordenadas como argumentos
(define (merge lista1 lista2)
  
  ; Utiliza la expresión cond para evaluar múltiples condiciones en orden
  (cond
    
    ; Si la lista1 es vacía, devuelve la lista2
    ((null? lista1) lista2)
    
    ; Si la lista2 es vacía, devuelve la lista1
    ((null? lista2) lista1)
    
    ; Si ninguna de las condiciones anteriores es verdadera, ejecuta el bloque else
    (else
     ; Utiliza una expresión condicional (if) para comparar los primeros elementos de lista1 y lista2
     (if (< (car lista1) (car lista2))
         
         ; Si el primer elemento de lista1 es menor, consíguelo a la lista resultante y
         ; Luego, llama recursivamente a merge con el resto de lista1 y lista2
         (cons (car lista1) (merge (cdr lista1) lista2))
         
         ; Si el primer elemento de lista2 es menor o igual, consíguelo a la lista resultante y
         ; Luego, llama recursivamente a merge con lista1 y el resto de lista2
         (cons (car lista2) (merge lista1 (cdr lista2)))))))

; Ejemplos de uso de la función merge

(displayln (merge '(5 6 7) '(1 2 3 4))) 

(displayln (merge '(3 4 5) '(3 4 5 6))) 
;....................................................................................................................

;Ejercicio 8
; Define una función llamada subconjunto? que toma dos conjuntos como argumentos
(define (subconjunto? conjunto1 conjunto2)
  
  ; Utiliza la expresión cond para evaluar múltiples condiciones en orden
  (cond
    
    ; Si conjunto1 es vacío, entonces es un subconjunto y devuelve #t
    ((null? conjunto1) #t)
    
    ; Si el primer elemento de conjunto1 está presente en conjunto2
    ; Luego, llamamos recursivamente a subconjunto? con el resto de conjunto1 y conjunto2
    ((member (car conjunto1) conjunto2)
     (subconjunto? (cdr conjunto1) conjunto2))
    
    ; Si ninguna de las condiciones anteriores es verdadera, entonces conjunto1 no es un subconjunto
    (else #f)))

; Ejemplos de uso de la función subconjunto?

(displayln (subconjunto? '() '(a b c d e f))) 

(displayln (subconjunto? '(a b c) '(a b c d e f))) 

(displayln (subconjunto? '(a b x) '(a b c d e f))) 
;......................................................................................................................

;Ejericio 9
; Define una función llamada eliminar-elemento que toma una lista y un elemento como argumentos
(define (eliminar-elemento lista elemento)
  
  ; Utiliza la expresión condicional (if) para comprobar si el elemento está presente en la lista
  (if (member elemento lista) 
    
    ; Si el elemento está presente, utiliza map para crear una nueva lista que copia cada elemento
    ; Usa filter para excluir el elemento deseado de la nueva lista
    (map (lambda (x) x) 
         (filter (lambda (x) (not (equal? x elemento))) lista))
    
    ; Si el elemento no está presente, simplemente devuelve la lista original
    lista))

; Ejemplo de uso de la función eliminar-elemento con diferentes listas y elementos

(displayln (eliminar-elemento '(1 2 3 4 5) 3)) 

(displayln (eliminar-elemento '(a b c d e) 'x))

(displayln (eliminar-elemento '(a b c d e) 'b)) 
;..................................................................................................................
